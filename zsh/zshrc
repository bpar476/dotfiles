# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

export ZSHRC=$HOME/.zshrc

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="afowler"


####################################################################
####################################################################
##############                                        ##############
##############              ZSH Plugins               ##############
##############                                        ##############
####################################################################
####################################################################

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git golang npm nvm zsh-syntax-highlighting gh ripgrep asdf)

source $ZSH/oh-my-zsh.sh

# Local config
LOCAL_ZSHRC="$HOME/.zsh_local"
[ -f "$LOCAL_ZSHRC" ] && source "$LOCAL_ZSHRC"

## Custom zsh highlighting colours

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Customisations
# Load aliases
source ~/.zsh_aliases

# Golang config
export PATH=$PATH:/usr/local/go/bin
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin
# Set the GOPROXY environment variable
export GOPROXY=https://goproxy.io,direct
# Set environment variable allow bypassing the proxy for specified repos (optional)
export GOPRIVATE=github.com/immutable

# Python config
export PATH=$PATH:$HOME/.local/bin

# Start docker
if docker ps 2>&1 >> /dev/null; then
else
    echo "Starting docker server..."
    sudo service docker start
fi

# NVM setup
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh"  ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion"  ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
NVM_DEFAULT="16"

function infer_remote {
    remotes=$(git remote)
    remote_count=$(echo $remotes | wc -l)
    if [ $remote_count -ne 1 ]; then
            return -1
    fi
    echo $remotes
}

function gpsu {
    current_branch=$(git branch --show-current)
    remote=$(infer_remote)
    if [[ $remote -eq -1 ]]; then
        if [ $# -ne 1 ]; then
            echo "Multiple remotes detected, please specify a remote as arg1"
            return 1
        fi
        git push -u $1 $current_branch
    else
        git push -u $remote $current_branch
    fi

    return $?
}

function gdr {
    current_branch=$(git branch --show-current)
    remote=$(infer_remote)
    if [[ $remote == -1 ]]; then
        if [ $# -ne 1 ]; then
            echo "Multiple remotes detected, please specify a remote as arg1"
            return 1
        fi
        git diff $1/$current_branch
    else
        git diff $remote/$current_branch
    fi

    return $?
}

function expenv {
    if [ $# -ne 1 ]; then
        echo "Usage -- expenv <env_file>"
        return 1
    fi

    if [ -f $1 ]; then
        cat $1 | while read line; do
            export $line
        done
    else
        echo "arg1 must be an environment file"
        return 1
    fi
}

# WSL Specific things
if [[ "${PLATFORM}" == "WSL" ]]; then
    export WINHOME=/mnt/c/Users/BenPartridge

    function pbcopy {
        tee <&0 | clip.exe
    }

    function pbpaste {
        powershell.exe Get-Clipboard | sed 's/\r$//' | sed -z '$ s/\n$//'
    }
fi

